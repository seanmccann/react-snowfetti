{"version":3,"sources":["../../src/components/Canvas.jsx"],"names":[],"mappings":"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","file":"Canvas.js","sourcesContent":["import React from 'react';\nimport { generateParticles, updateParticles } from '../utils/particle';\n\nconst PropTypes = React.PropTypes;\n\nconst PROFILE = [ 'snow', 'steady' ];\nconst AMOUNT = 800;\nconst WIDTH = 600;\nconst HEIGHT = 300;\nconst STYLES = {\n\tbackgroundColor: '#0A2933',\n\tposition: 'absolute',\n\ttop: '0px',\n\tleft: '0px'\n};\n\nexport default React.createClass({\n\n\tpropTypes: {\n\t\twidth: PropTypes.number,\n\t\theight: PropTypes.number,\n\t\tstyle: PropTypes.object,\n\t\tamount: PropTypes.number,\n\t\tprofile: PropTypes.array\n\t},\n\n\t/**\n\t * Canvas context.\n\t *\n\t * @type {object}\n\t *\n\t * @see `render()`\n\t */\n\tctx: null,\n\n\t/**\n\t * Dynamic particle x coordinate value, determined by the mouse\n\t * cursor position.\n\t *\n\t * @type {number}\n\t *\n\t * @see `handleMouseMove()`\n\t */\n\tdynamicX: 1,\n\n\t/**\n\t * Draws particles on the canvas by continiously updating the\n\t * particle values.\n\t *\n\t * @param  {array} particles - particle Objects to be rendered\n\t */\n\tdraw (particles) {\n\n\t\t/**\n\t\t * Note that angles are measured in radians:\n\t\t *\n\t\t * radians = (Math.PI / 180) * degrees\n\t\t */\n\t\tconst startAngle = 0;\n\t\tconst endAngle = 2 * Math.PI; // 360 degrees in radians\n\t\tconst antiClockwise = true;\n\t\tconst { ctx, dynamicX } = this;\n\t\tconst {\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT,\n\t\t\tprofile = PROFILE\n\t\t} = this.props;\n\t\tconst [ type ] = profile;\n\n\t\t// Clear the canvas context before updating and animating the particles.\n\t\tctx.clearRect(0, 0, width, height);\n\n\t\t// Updates the particle values before (re) drawing to create an animation on the canvas.\n\t\tparticles.forEach(particle => {\n\t\t\tconst {\n\t\t\t\tdeltaX,\n\t\t\t\tdeltaY,\n\t\t\t\tcolor,\n\t\t\t\tradius,\n\t\t\t\topacity,\n\t\t\t\tdeltaOpacity\n\t\t\t} = particle;\n\n\t\t\t// Update particle values before animating.\n\t\t\tparticle.x += deltaX + 1.33 * dynamicX;\n\t\t\tparticle.y += deltaY;\n\n\t\t\t// Update particle opacity based on particle type.\n\t\t\tswitch (type) {\n\t\t\t\tcase 'snow': {\n\t\t\t\t\tparticle.opacity = opacity;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase 'confetti': {\n\t\t\t\t\tif (particle.opacity <= 0) {\n\t\t\t\t\t\tparticle.opacity += deltaOpacity;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (particle.opacity > 0) {\n\t\t\t\t\t\tparticle.opacity -= deltaOpacity;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Style the particles.\n\t\t\tctx.fillStyle = color;\n\t\t\tctx.globalAlpha = particle.opacity;\n\n\t\t\t// Animate the particles.\n\t\t\tctx.beginPath();\n\t\t\tctx.arc(particle.x, particle.y, radius, startAngle, endAngle, antiClockwise);\n\t\t\tctx.fill();\n\t\t\tctx.closePath();\n\n\t\t\t// Re initialize the particle when it falls out of the view port.\n\t\t\tif (particle.y > height) {\n\t\t\t\tparticle.init();\n\t\t\t}\n\t\t});\n\n\t\tthis.animate(particles);\n\t},\n\n\t/**\n\t * Animate by drawing all particles.\n\t *\n\t * @param  {array} particles - particle Objects to be rendered\n\t */\n\tanimate (particles) {\n\t\twindow.requestAnimationFrame( this.draw.bind(this, particles) );\n\t},\n\n\t/**\n\t * Calculates the dynamic particle x coordinate based on\n\t * the mouse cursor position.\n\t *\n\t * @param  {object} event - the event Object\n\t */\n\thandleMouseMove (event) {\n\t\tconst { width = WIDTH } = this.props;\n\n\t\tthis.dynamicX = event.pageX / width;\n\t},\n\n\tcomponentDidMount () {\n\t\tconst {\n\t\t\tprofile = PROFILE,\n\t\t\tamount = AMOUNT,\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT\n\t\t} = this.props;\n\n\t\tconst particles = generateParticles(profile, amount, { width, height });\n\n\t\tthis.animate(particles);\n\t},\n\n\trender () {\n\t\tconst {\n\t\t\twidth = WIDTH,\n\t\t\theight = HEIGHT,\n\t\t\tstyles = STYLES\n\t\t} = this.props;\n\n\t\treturn (\n\t\t\t<canvas\n\t\t\t\tid=\"react-snowfetti\"\n\t\t\t\twidth={ width }\n\t\t\t\theight={ height }\n\t\t\t\tstyle={ styles }\n\t\t\t\tref={ canvas =>\n\t\t\t\t\t{ this.ctx = (canvas != null) ? canvas.getContext('2d') : null  }\n\t\t\t\t}\n\t\t\t\tonMouseMove={ this.handleMouseMove }\n\t\t\t>\n\t\t\t\t<h3>\n\t\t\t\t\tOh no! You do not have support for the html5 canvas API!\n\t\t\t\t</h3>\n\t\t\t</canvas>\n\t\t);\n\t}\n});\n"]}