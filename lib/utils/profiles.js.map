{"version":3,"sources":["../../src/utils/profiles.js"],"names":[],"mappings":";;;;;;;;QAuHgB,iB,GAAA,iB;;AAvHhB;;;;;;IAEQ,M,GAAkB,I,CAAlB,M;IAAQ,K,GAAU,I,CAAV,K;;;;;;;;;;;;;AAYhB,SAAS,sBAAT,CAAgC,OAAhC,EAAyC;AACxC,KAAI,IAAI,MAAO,WAAW,QAAQ,MAA1B,CAAR;;AAEA,QAAO,QAAQ,CAAR,CAAP;AACA;;;;;;;AAOD,IAAM,QAAQ;;;;;;;;;;AASb,KATa,gBASP,OATO,EASE;AACd,MAAI,QAAQ,WAAW,QAAQ,MAAnB,GACX,uBAAuB,OAAvB,CADW,GAEX,MAFD;;AAIA,SAAO;AACN,eADM;AAEN,WAAQ,MAAM,WAAW,CAFnB;AAGN,YAAS,MAAM,WAAW;AAHpB,GAAP;AAKA,EAnBY;;;;;;;;;;AA4Bb,SA5Ba,oBA4BH,OA5BG,EA4BM;AAClB,MAAI,QAAQ,WAAW,QAAQ,MAAnB,GACX,uBAAuB,OAAvB,CADW,GAEX,oBAAU,QAAV,EAFD;;AAIA,SAAO;AACN,eADM;AAEN,WAAQ,MAAM,WAAW,CAFnB;AAGN,YAAS,CAHH;AAIN,iBAAc,OAAO;AAJf,GAAP;AAMA;AAvCY,CAAd;;;;;;;AA+CA,IAAM,aAAa;;;;;;;;AAOlB,KAPkB,kBAOV;AACP,SAAO;AACN,WAAQ,OAAO,QADT;AAEN,WAAQ,OAAO,WAAW;AAFpB,GAAP;AAIA,EAZiB;;;;;;;;AAmBlB,OAnBkB,oBAmBR;AACT,SAAO;AACN,WAAQ,OAAO,QADT;AAEN,WAAQ,MAAM,WAAW,GAAjB,GAAuB,WAAW;AAFpC,GAAP;AAIA,EAxBiB;;;;;;;;AA+BlB,KA/BkB,kBA+BV;AACP,SAAO;AACN,WAAQ,OAAO,QADT;AAEN,WAAQ,MAAM,WAAW,GAAjB,GAAuB,WAAW;AAFpC,GAAP;AAIA;AApCiB,CAAnB;;;;;;;;;;AA+CO,SAAS,iBAAT,OAIJ;AAAA;;AAAA;AAAA,KAHF,IAGE,0BAHK,MAGL;AAAA;AAAA,KAFF,QAEE,2BAFS,MAET;AAAA;AAAA,KADF,OACE,2BADQ,EACR;;AACF,QAAO,OAAO,MAAP,CACN,EADM,EAEN,MAAM,IAAN,EAAY,OAAZ,CAFM,EAGN,WAAW,QAAX,GAHM,CAAP;AAKA","file":"profiles.js","sourcesContent":["import randomHex from 'random-hex';\n\nconst { random, floor } = Math;\n\n/**\n * Retrieves a random color from the supplied color\n * palette.\n *\n * @private\n *\n * @param  {array} palette - contains hex color strings\n *\n * @return {string} random hex color code\n */\nfunction _getRandomPaletteColor(palette) {\n\tlet i = floor( random() * palette.length );\n\n\treturn palette[i];\n}\n\n/**\n * Hash map of particle types.\n *\n * @type {Object}\n */\nconst TYPES = {\n\n\t/**\n\t * Retrieves the visual values of a `snow` particle.\n\t *\n\t * @param  {array} palette - optional hex color strings\n\t *\n\t * @return {object} snow particle values.\n\t */\n\tsnow (palette) {\n\t\tlet color = palette && palette.length ?\n\t\t\t_getRandomPaletteColor(palette) :\n\t\t\t'#fff';\n\n\t\treturn {\n\t\t\tcolor,\n\t\t\tradius: 0.4 + random() * 2,\n\t\t\topacity: 0.5 + random() * 0.5\n\t\t}\n\t},\n\n\t/**\n\t * Retrieves the visual values of a `confetti` particle.\n\t *\n\t * @param  {array} palette - optional hex color strings\n\t *\n\t * @return {object} confetti particle values.\n\t */\n\tconfetti (palette) {\n\t\tlet color = palette && palette.length ?\n\t\t\t_getRandomPaletteColor(palette) :\n\t\t\trandomHex.generate();\n\n\t\treturn {\n\t\t\tcolor,\n\t\t\tradius: 0.2 + random() * 4,\n\t\t\topacity: 1,\n\t\t\tdeltaOpacity: 0.05 * random()\n\t\t}\n\t},\n};\n\n/**\n * Hash map of particle velocity types.\n *\n * @type {Object}\n */\nconst VELOCITIES = {\n\n\t/**\n\t * Retrieves the kinetic values of a `slow` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tslow () {\n\t\treturn {\n\t\t\tdeltaX: 0.35 - random(),\n\t\t\tdeltaY: 0.15 + random() * 1.1\n\t\t};\n\t},\n\n\t/**\n\t * Retrieves the kinetic values of a `steady` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tsteady () {\n\t\treturn {\n\t\t\tdeltaX: 0.25 - random(),\n\t\t\tdeltaY: 0.8 + random() * 0.4 + random() * 2\n\t\t};\n\t},\n\n\t/**\n\t * Retrieves the kinetic values of a `fast` particle.\n\t *\n\t * @return {object} kinetic particle values.\n\t */\n\tfast () {\n\t\treturn {\n\t\t\tdeltaX: 0.25 - random(),\n\t\t\tdeltaY: 1.1 + random() * 0.4 + random() * 2\n\t\t};\n\t}\n};\n\n/**\n * Retrieves all particle values denoted by a specific\n * profile.\n *\n * @param  {array} profile - contains `type`, `velocity` and optional `palette`\n *\n * @return {object} contains all particle values\n */\nexport function getParticleValues([\n\ttype = 'snow',\n\tvelocity = 'slow',\n\tpalette = []\n]) {\n\treturn Object.assign(\n\t\t{},\n\t\tTYPES[type](palette),\n\t\tVELOCITIES[velocity]()\n\t);\n};\n"]}