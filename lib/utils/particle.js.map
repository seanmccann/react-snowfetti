{"version":3,"sources":["../../src/utils/particle.js"],"names":[],"mappings":";;;;;QAiDgB,iB,GAAA,iB;;AAjDhB;;;;;;;;;;;;AAYA,SAAS,eAAT,CAAyB,OAAzB,QAAqD;AAAA,KAAjB,KAAiB,QAAjB,KAAiB;AAAA,KAAV,MAAU,QAAV,MAAU;AAAA,KAC5C,MAD4C,GACjC,IADiC,CAC5C,MAD4C;;AAAA,0BAShD,iCAAkB,OAAlB,CATgD;;AAAA,KAGnD,MAHmD,sBAGnD,MAHmD;AAAA,KAInD,MAJmD,sBAInD,MAJmD;AAAA,KAKnD,YALmD,sBAKnD,YALmD;AAAA,KAMnD,MANmD,sBAMnD,MANmD;AAAA,KAOnD,KAPmD,sBAOnD,KAPmD;AAAA,KAQnD,OARmD,sBAQnD,OARmD;;;AAWpD,QAAO;AACN,MADM,kBACC;AACN,QAAK,CAAL,GAAS,WAAW,KAApB;AACA,QAAK,CAAL,GAAS,WAAW,CAAC,MAArB;AACA,QAAK,MAAL,GAAc,MAAd;AACA,QAAK,MAAL,GAAc,MAAd;AACA,QAAK,KAAL,GAAa,KAAb;AACA,QAAK,MAAL,GAAc,MAAd;AACA,QAAK,OAAL,GAAe,OAAf;AACA,QAAK,YAAL,GAAoB,YAApB;;AAEA,UAAO,IAAP;AACA;AAZK,EAAP;AAcA;;;;;;;;;;;;AAYM,SAAS,iBAAT,CAA2B,OAA3B,EAAoC,MAApC,EAA4C,MAA5C,EAAoD;AAC1D,KAAM,YAAY,EAAlB;;AAEA,QAAO,QAAP,EAAiB;AAChB,MAAI,WAAW,gBAAgB,OAAhB,EAAyB,MAAzB,CAAf;;AAEA,WAAS,IAAT;AACA,YAAU,IAAV,CAAe,QAAf;AACA;;AAED,QAAO,SAAP;AACA","file":"particle.js","sourcesContent":["import { getParticleValues } from '../utils/profiles';\n\n/**\n * Create a single particle Object.\n *\n * @private\n *\n * @param  {array}  profile - particle profile that contains type and velocity\n * @param  {object} bounds  - canvas width and height\n *\n * @return {object} particle Object\n */\nfunction _createParticle(profile, { width, height }) {\n\tconst { random } = Math;\n\tconst {\n\t\tdeltaX,\n\t\tdeltaY,\n\t\tdeltaOpacity,\n\t\tradius,\n\t\tcolor,\n\t\topacity\n\t} = getParticleValues(profile);\n\n\treturn {\n\t\tinit() {\n\t\t\tthis.x = random() * width;\n\t\t\tthis.y = random() * -height;\n\t\t\tthis.deltaX = deltaX;\n\t\t\tthis.deltaY = deltaY;\n\t\t\tthis.color = color;\n\t\t\tthis.radius = radius;\n\t\t\tthis.opacity = opacity;\n\t\t\tthis.deltaOpacity = deltaOpacity;\n\n\t\t\treturn this;\n\t\t}\n\t};\n}\n\n/**\n * Generates a specific amount of particles to be rendered\n * on the canvas based on the specified particle profile.\n *\n * @param  {array}  profile - particle profile that contains type and velocity\n * @param  {number} amount  - the amount of particles to be rendered\n * @param  {object} bounds  - canvas width and height\n *\n * @return {array} particle Objects to be rendered\n */\nexport function generateParticles(profile, amount, bounds) {\n\tconst particles = [];\n\n\twhile (amount--) {\n\t\tlet particle = _createParticle(profile, bounds);\n\n\t\tparticle.init();\n\t\tparticles.push(particle);\n\t}\n\n\treturn particles;\n}\n"]}